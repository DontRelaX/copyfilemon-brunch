// Generated by CoffeeScript 1.6.3
var params={},
  path = require('path'),
  fs = require('fs');

var copyassets = function(config) {
  params = config;
}
copyassets.prototype.brunchPlugin = true;
copyassets.prototype.type='javascript';
copyassets.prototype.extension='js';

copyassets.prototype.onCompile = function(data, path, callback) {
  Object.keys(params.copyassets).forEach(function(key){
    var dir = key;
    var files = params.copyassets[key];
    ///createAppDir(dir);
    var i =0, l = files.length;
    for(i;i<l;i++){
      console.log('files is ', files[i]);
      //fs.stat(files[i], function(err, stat){
        //if(err){

        //}else{

          cloneDirAndFiles(files[i], dir);

        //}
      //})
    }
    console.log('dir: ', dir, ' files: ', files);
  });
};

function createAppDir(path){
  fs.exists(path, function(exists){
    console.log(exists, 'opopiii');
    if(!exists){
      ///no existe el directorio: do mkdir, 0644
      fs.mkdir('public/'+path, 0644, function(err){
        if(err) console.log('give one error', err);
        else console.log('mira si has creado la carpeta');
      });
    }else{
      console.log('a copy');
      ////luego existe el directorio: do nothing
    }
  });
}

function cloneDirAndFiles(copyFrom, copyTo){
  ///directorio
  //if(fs.lstatSync(copyFrom).isDirectory()){
    copyFolderRecursiveSync(copyFrom, 'public/'+copyTo);
  //}else{

  //}
}

function copyFileSync( source, target ) {

    var targetFile = target;

    //if target is a directory a new file with the same name will be created
    if ( fs.existsSync( target ) ) {
        if ( fs.lstatSync( target ).isDirectory() ) {
            targetFile = path.join( target, path.basename( source ) );
        }
    }
    console.log(source, targetFile, 'opo jiop');
    fs.createReadStream( source ).pipe( fs.createWriteStream( targetFile ) );
}

function copyFolderRecursiveSync( source, target ) {
    var files = [];
    //check if folder needs to be created or integrated
    var targetFolder = path.join( target, path.basename( source ) );
    if ( !fs.existsSync( target ) ) {
        fs.mkdirSync( target );
    }

    //copy
    //console.log();
    if ( fs.lstatSync( source ).isDirectory() ) {
        files = fs.readdirSync( source );
        files.forEach( function ( file ) {
            var curSource = path.join( source, file );
            if ( fs.lstatSync( curSource ).isDirectory() )
              copyFolderRecursiveSync( curSource, target );
            else
              copyFileSync( curSource, target );

        } );
    }else{
      copyFileSync( source, target );
    }
}
module.exports = copyassets;
