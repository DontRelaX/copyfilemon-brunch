// Generated by CoffeeScript 1.6.3
var params={},
  path = require('path'),
  fs = require('fs');

var copyassets = function(config) {
  params = config;
}
copyassets.prototype.brunchPlugin = true;
copyassets.prototype.type='javascript';
copyassets.prototype.extension='js';

copyassets.prototype.onCompile = function(data, path, callback) {
  Object.keys(params.copyassets).forEach(function(key){
    var dir = key;
    var files = params.copyassets[key];
    var i =0, l = files.length;
    for(i;i<l;i++){
      copyFolderRecursiveSync(files[i], 'public/'+dir);
      console.log(new Date().toJSON(),' - \x1b[32minfo: \x1b[30mCopy file: '+files[i]+' to public/'+dir);
    }
  });
};

function copyFileSync( source, target )
{
  var targetFile = target;

  //if target is a directory a new file with the same name will be created
  if ( fs.existsSync( target ) )
    if ( fs.lstatSync( target ).isDirectory() )
      targetFile = path.join( target, path.basename( source ) );

  fs.createReadStream( source ).pipe( fs.createWriteStream( targetFile ) );
}

function copyFolderRecursiveSync( source, target ) {
    var files = [];
    var targetFolder = path.join( target, path.basename( source ) );
    if ( !fs.existsSync( target ) )
        mkdirs( target );

    if ( fs.lstatSync( source ).isDirectory() ) {
        files = fs.readdirSync( source );
        files.forEach( function ( file ) {
            var curSource = path.join( source, file );
            if ( fs.lstatSync( curSource ).isDirectory() )
              copyFolderRecursiveSync( curSource, target );
            else
              copyFileSync( curSource, target );

        } );
    }else{
      copyFileSync( source, target );
    }
}

function mkdirs(path) {
  var dirs = path.split('/');
  var prevDir = dirs.splice(0,1)+"/";
  while(dirs.length > 0) {
    var curDir = prevDir + dirs.splice(0,1);
    if (! fs.existsSync(curDir) )
      fs.mkdirSync(curDir);
      prevDir = curDir + '/';
  }
}

module.exports = copyassets;
